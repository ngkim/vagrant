# -*- mode: ruby -*-
# vi: set ft=ruby :

############################################################
# Author: Namgon Kim
# Date: 2015. 02. 25
#
# AGGR-SW, MGMT-SW, ACCESS-SW, SERVER-TOR-SW, CORE-SW 5개 스위치
# All-in-one, Customer, Server Farm, Public 4개 노드 
############################################################

require "../include/vnode.rb"

###############################################################################
# TODO: SW에 대한 Management Interface 연결 필요: NIC이 8개 이상이어야 가능
# TODO: SW들 사이의 연결을 처리하기 위해서는 range만으로 인터페이스를 처리할 수 없다.
# array를 받는 형태의 생성자도 필요 
# ==> vnode.rb를 수정하여 Range를 Array로 변환하도록 설정함 
# (기존 버전 Vagrantfile들도 수정 필요) 

mgmt_sw    = Node.new("MGMT-SW" ,  (1..7)  , 2, 2048, 23010)
aggr_sw    = Node.new("AGGR-SW" ,  (8..13) , 4, 2048, 23314, -1, -1, "em1")
accs_sw    = Node.new("ACCS-SW" ,  [10,14] , 2, 2048, 23011)
stor_sw    = Node.new("STOR-SW" ,  [11,15] , 2, 2048, 23012)
core_sw    = Node.new("CORE-SW" ,  [13,16] , 2, 2048, 23013)

orch_node  = Node.new("ORCH"	, [1]            , 2, 2048, 23020)
all_in_one = Node.new("ALL-ONE" , [2,3,4,8,9,12] , 8, 8192, 23021, 23080, 23680)
customer   = Node.new("CUSTOM"	, [5,14]         , 2, 2048, 23022)
server     = Node.new("SERVER"	, [6,15]         , 2, 2048, 23023)
public     = Node.new("PUBLIC"	, [7,16]         , 2, 2048, 23024)

# list of nodes and switches
switches = [ mgmt_sw, aggr_sw, accs_sw, stor_sw, core_sw ]
nodes    = [ orch_node, all_in_one, customer, server, public ]
###############################################################################
# IMPORTANT: use your own link_prefix to avoid duplication error 
# with other vagrant instances

#link_prefix="openstack-mn-1c"
# use current directory name as link_prefix 
link_prefix=File.basename(Dir.getwd)

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  
  switches.each do | switch |
    hostname        = switch.get_hostname
    ssh_nat_port    = switch.get_ssh_nat_port
    interfaces      = switch.get_interfaces
    bridged_interface   = switch.get_bridged_interface
    cpu         = switch.get_cpu
    memory      = switch.get_memory

    interface_count = interfaces.length
    if bridged_interface != ""
      interface_count += 1
    end
 
    config.vm.define "#{hostname}" do |cfg_sw|
      cfg_sw.vm.box = "ubuntu/trusty64"
      cfg_sw.vm.boot_timeout = 90

      cfg_sw.ssh.username = "vagrant"
      cfg_sw.ssh.password = "vagrant"
    
      for i in interfaces
        cfg_sw.vm.network "private_network", auto_config: false, virtualbox__intnet: "#{link_prefix}_switch_interface_#{i}"     
      end

      # bridged interface to have external network connectivity
      if bridged_interface != ""
        cfg_sw.vm.network "public_network", auto_config: false, bridge: "#{bridged_interface}"
      end

      cfg_sw.vm.provision :shell, :path => "../common/install_openvswitch_of13.sh"
      cfg_sw.vm.provision :shell, :path => "init_node_#{hostname}.sh"
      cfg_sw.vm.provider "virtualbox" do |v|
        # TODO:
        for i in 2..(interface_count + 1)
          # 스위칭에 이용하는 인터페이스에 대해서 promiscuous mode를 allow vms로 설정해줌
      v.customize ["modifyvm", :id, "--nicpromisc#{i}", "allow-all"]                      
    end
    v.customize ["modifyvm", :id, "--hpet", "on"]
    #v.gui = true
    v.memory = memory
    v.cpus = cpu
      end
      cfg_sw.vm.network :forwarded_port, guest: 22, host: "#{ssh_nat_port}", id: "ssh"
    
    end
  end
  
  nodes.each do | node |
    hostname 		= node.get_hostname
    cpu 		    = node.get_cpu
    memory 		    = node.get_memory
    ssh_nat_port 	= node.get_ssh_nat_port
    http_nat_port 	= node.get_http_nat_port
    novnc_nat_port 	= node.get_novnc_nat_port
    interfaces 		= node.get_interfaces

    interface_count	= interfaces.length 
 
    config.vm.define "#{hostname}" do |cfg_node|
      cfg_node.vm.box = "ubuntu/trusty64"
      cfg_node.vm.boot_timeout = 300

      # Run our shell script on provisioning
      cfg_node.vm.provision :shell, :path => "init_node_#{hostname}.sh"
  	
      # 여러 개의 인터페이스를 할당
      # 하나의 VM에 최대 생성 가능한 8개 인터페이스 중 첫 번째는 NAT, 나머지 7개에 대해서 다른 VM과의 연결을 고려하여 연결
      for i in interfaces
        cfg_node.vm.network "private_network", auto_config: false, virtualbox__intnet: "#{link_prefix}_switch_interface_#{i}"  	
      end
  
      cfg_node.vm.provider "virtualbox" do |v|
        for i in 2..(interface_count+1)
  	  v.customize ["modifyvm", :id, "--nicpromisc#{i}", "allow-all"]  	        	      
      	end
  	v.customize ["modifyvm", :id, "--hpet", "on"]
        #v.gui = true
        v.memory = memory
        v.cpus = cpu
      end  	  
  	   
      cfg_node.vm.network :forwarded_port, guest: 22, host: "#{ssh_nat_port}", id: "ssh"  
      if http_nat_port != -1
        cfg_node.vm.network :forwarded_port, guest: 80, host: "#{http_nat_port}", id: "http"  
      end
      if novnc_nat_port != -1
        cfg_node.vm.network :forwarded_port, guest: 6080, host: "#{novnc_nat_port}", id: "novnc"  
      end

      #cfg_node.vm.synced_folder "../openstack", "/root/openstack", disabled: false
    end
  end
end
